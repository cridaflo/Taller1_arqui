// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "04/22/2017 22:07:13"
                                                                                
// Verilog Test Bench template for design : Laboratorio7
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module SC_RegIR_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg CLOCK_50;
reg RESET;
reg WRITE;
reg [31:0] BUS_IN;
// wires - output                                              
wire [31:0]  BUS_OUT;
wire [1:0]  uDataPath_RegIR_OP;
wire [4:0]  uDataPath_RegIR_RD;
wire [2:0]  uDataPath_RegIR_OP2;
wire [5:0]  uDataPath_RegIR_OP3;
wire [4:0]  uDataPath_RegIR_RS1;
wire uDataPath_RegIR_BIT13;
wire [4:0]  uDataPath_RegIR_RS2;

// assign statements (if any)                          
integer i;
SC_RegIR #(.DATAWIDTH_BUS(32)) r1 (
// port map - connection between master ports and signals/registers   
	.SC_RegIR_DataBUS_Out(BUS_OUT),
	.SC_RegIR_OP(uDataPath_RegIR_OP),
	.SC_RegIR_RD(uDataPath_RegIR_RD),
	.SC_RegIR_OP2(uDataPath_RegIR_OP2),
	.SC_RegIR_OP3(uDataPath_RegIR_OP3),
	.SC_RegIR_RS1(uDataPath_RegIR_RS1),
	.SC_RegIR_BIT13(uDataPath_RegIR_BIT13),
	.SC_RegIR_RS2(uDataPath_RegIR_RS2),
	.SC_RegIR_CLOCK_50(CLOCK_50),
	.SC_RegIR_Reset_InHigh(RESET),
	.SC_RegIR_Write_InHigh(WRITE),
	.SC_RegIR_DataBUS_In(BUS_IN)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
                                                       
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
#0 RESET<=1;  
#60 RESET<=0;   	

#90 BUS_IN<=32'b10011100100000111011111111111111;  
#100 WRITE<=1;		

#100 WRITE<=1;	
BUS_IN<=32'b01011100100000111011111111111111;  

#100 WRITE<=1;	
BUS_IN<=32'b11011100100000111011111111111111;  
				 
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

