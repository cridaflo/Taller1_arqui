// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "04/22/2017 22:07:13"
                                                                                
// Verilog Test Bench template for design : Laboratorio7
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module SC_uDatapath_vlg_tst();
parameter TCK = 20;
parameter CLK_FREQ = 1000000000 / TCK; 
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg CLOCK_50;
reg RESET;
// wires - output                                              
wire  PSR_Overflow_InHigh;
wire PSR_Carry_InHigh;
wire  PSR_Negative_InHigh;
wire  PSR_Zero_InHigh;
wire [1:0]  RegIR_OP;
wire [4:0]  RegIR_RD;
wire [2:0]  RegIR_OP2;
wire [5:0]  RegIR_OP3;
wire [4:0]  RegIR_RS1;
wire RegIR_BIT13;
wire [4:0]  RegIR_RS2;
wire [10:0]  ADRESS_MUX_OUT;

wire [37:0]  Decoder_DataWrite_Wire_C;
wire [5:0]  MUX_TO_DECODER_C;
wire [5:0]MIR_C_FIELD;
wire [40:0]BUS_ROM_TO_MIR;
wire [31:0]  CC_MUX_REG_R1;
wire [31:0]  CC_MUX_REG_R2;
wire [31:0]  CC_MUX_REG_R3;
wire [31:0]  CC_MUX_REG_R4;
wire [31:0]  CC_MUX_REG_R32;
wire [31:0]  CC_MUX_REG_R33;
wire [31:0] C_BUS_MUX_ALU_In;
wire [31:0] DataBUS_A_Out;
wire [31:0] DataBUS_B_Out;
// assign statements (if any)                          
integer i;
uDataPath #(41, 11, 8, 2, 6, 3, 4, 32, 6, 4, 32'h00000000, 32'h00000000,32'h00000800, 38,6,6) uDataPath_0 (
	//////////// OUTPUTS //////////
	.PSR_Overflow_InHigh(PSR_Overflow_InHigh),
	.PSR_Carry_InHigh(PSR_Carry_InHigh),
	.PSR_Negative_InHigh(PSR_Negative_InHigh),
	.PSR_Zero_InHigh(PSR_Zero_InHigh),
	.RegIR_OP(RegIR_OP),
	.RegIR_RD(RegIR_RD),
	.RegIR_OP2(RegIR_OP2),
	.RegIR_OP3(RegIR_OP3),
	.RegIR_RS1(RegIR_RS1),
	.RegIR_BIT13(RegIR_BIT13),
	.RegIR_RS2(RegIR_RS2),
	.ADRESS_MUX_OUT(ADRESS_MUX_OUT),
	.Decoder_DataWrite_Wire_C(Decoder_DataWrite_Wire_C),
	.CC_MUX_REG_R32(CC_MUX_REG_R32),
	.MUX_TO_DECODER_C(MUX_TO_DECODER_C),
	.MIR_C_FIELD(MIR_C_FIELD),
	.BUS_ROM_TO_MIR(BUS_ROM_TO_MIR),
	.CC_MUX_REG_R1(CC_MUX_REG_R1),
	.CC_MUX_REG_R2(CC_MUX_REG_R2),
	.CC_MUX_REG_R3(CC_MUX_REG_R3),
	.CC_MUX_REG_R4(CC_MUX_REG_R4),
	.CC_MUX_REG_R33(CC_MUX_REG_R33),
	.C_BUS_MUX_ALU_In(C_BUS_MUX_ALU_In),
	.DataBUS_A_Out(DataBUS_A_Out),
	.DataBUS_B_Out(DataBUS_B_Out),
	//////////// INPUTS //////////
	.uDataPath_CLOCK_50(CLOCK_50),
	.uDataPath_Reset_InHigh(RESET)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
                                                     
// --> end 
CLOCK_50 <= 0;                                                
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)  
#(TCK/2) CLOCK_50 <= ~ CLOCK_50;
always                   
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
#0 RESET<=1;  
#10 RESET<=0;  

@eachvec; 				                                             
// --> end                                             
end                                                    
endmodule

